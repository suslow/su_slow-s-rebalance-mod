#!/usr/bin/env python3
"""
GTFO Weapon Balance Analyzer
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–∞–Ω–∏–ª—å–Ω—É—é –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏–∏ –æ—Ä—É–∂–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–ª–∞–Ω—Å–∞
"""

import json
import os
from typing import Dict, List, Tuple, Any

class WeaponBalanceAnalyzer:
    def __init__(self, vanilla_path: str, mod_path: str):
        self.vanilla_path = vanilla_path
        self.mod_path = mod_path
        self.vanilla_data = None
        self.mod_data = None
        
        # –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.key_params = [
            'Damage',
            'DefaultClipSize', 
            'CostOfBullet',
            'ShotDelay',
            'StaggerDamageMulti',
            'PrecisionDamageMulti',
            'Sentry_DetectionMaxAngle',
            'Sentry_DetectionMaxRange',
            'Sentry_RotationSpeed',
            'Sentry_StartFireDelay'
        ]
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–±–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.imba_thresholds = {
            'Damage': 50,  # >50% —É–≤–µ–ª–∏—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
            'DefaultClipSize': 100,  # >100% —É–≤–µ–ª–∏—á–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
            'StaggerDamageMulti': 50,  # >50% —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–≥–ª—É—à–µ–Ω–∏—è
            'PrecisionDamageMulti': 30,  # >30% –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ —É—Ä–æ–Ω–∞
            'ShotDelay': -30,  # >30% —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
            'CostOfBullet': -50  # >50% —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—É–ª–∏
        }

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
        try:
            with open(self.vanilla_path, 'r', encoding='utf-8') as f:
                self.vanilla_data = json.load(f)
            with open(self.mod_path, 'r', encoding='utf-8') as f:
                self.mod_data = json.load(f)
            print("‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
        return True

    def get_weapon_name(self, weapon_block: Dict) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –æ—Ä—É–∂–∏—è –∏–∑ –±–ª–æ–∫–∞"""
        if 'name' in weapon_block:
            return weapon_block['name']
        return f"Unknown_ID_{weapon_block.get('persistentID', 'NoID')}"

    def extract_weapons(self, data: Dict) -> Dict[str, Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –æ—Ä—É–∂–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        weapons = {}
        if 'Blocks' in data:
            for block in data['Blocks']:
                weapon_name = self.get_weapon_name(block)
                weapons[weapon_name] = block
        return weapons

    def calculate_percentage_change(self, vanilla_val: float, mod_val: float) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"""
        if vanilla_val == 0:
            return 0 if mod_val == 0 else float('inf')
        return ((mod_val - vanilla_val) / vanilla_val) * 100

    def analyze_weapon_changes(self, vanilla_weapons: Dict, mod_weapons: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Ä—É–∂–∏–∏"""
        analysis = {
            'changed_weapons': {},
            'unchanged_weapons': [],
            'new_weapons': [],
            'removed_weapons': [],
            'imba_changes': [],
            'summary': {}
        }

        # –ù–∞–π—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        for weapon_name, vanilla_weapon in vanilla_weapons.items():
            if weapon_name in mod_weapons:
                mod_weapon = mod_weapons[weapon_name]
                changes = {}
                
                for param in self.key_params:
                    if param in vanilla_weapon and param in mod_weapon:
                        vanilla_val = vanilla_weapon[param]
                        mod_val = mod_weapon[param]
                        
                        if vanilla_val != mod_val:
                            percentage_change = self.calculate_percentage_change(vanilla_val, mod_val)
                            changes[param] = {
                                'vanilla': vanilla_val,
                                'mod': mod_val,
                                'change_percent': percentage_change
                            }
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–º–±–æ–≤–æ—Å—Ç—å
                            if param in self.imba_thresholds:
                                threshold = self.imba_thresholds[param]
                                if (threshold > 0 and percentage_change > threshold) or \
                                   (threshold < 0 and percentage_change < threshold):
                                    analysis['imba_changes'].append({
                                        'weapon': weapon_name,
                                        'parameter': param,
                                        'change_percent': percentage_change,
                                        'vanilla': vanilla_val,
                                        'mod': mod_val
                                    })
                
                if changes:
                    analysis['changed_weapons'][weapon_name] = changes
                else:
                    analysis['unchanged_weapons'].append(weapon_name)
            else:
                analysis['removed_weapons'].append(weapon_name)

        # –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ
        for weapon_name in mod_weapons:
            if weapon_name not in vanilla_weapons:
                analysis['new_weapons'].append(weapon_name)

        return analysis

    def generate_weapon_categories(self, weapons: Dict) -> Dict[str, List[str]]:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –æ—Ä—É–∂–∏–µ –ø–æ —Ç–∏–ø–∞–º"""
        categories = {
            'Rifles': [],
            'SMGs': [],
            'Shotguns': [],
            'Snipers': [],
            'DMRs': [],
            'Machine Guns': [],
            'Pistols': [],
            'Revolvers': [],
            'Bullpup': [],
            'SentryGuns': [],
            'Other': []
        }
        
        for weapon_name in weapons.keys():
            weapon_lower = weapon_name.lower()
            if 'rifle' in weapon_lower:
                categories['Rifles'].append(weapon_name)
            elif 'smg' in weapon_lower:
                categories['SMGs'].append(weapon_name)
            elif 'shotgun' in weapon_lower:
                categories['Shotguns'].append(weapon_name)
            elif 'sniper' in weapon_lower:
                categories['Snipers'].append(weapon_name)
            elif 'dmr' in weapon_lower:
                categories['DMRs'].append(weapon_name)
            elif 'machinegun' in weapon_lower:
                categories['Machine Guns'].append(weapon_name)
            elif 'pistol' in weapon_lower:
                categories['Pistols'].append(weapon_name)
            elif 'revolver' in weapon_lower:
                categories['Revolvers'].append(weapon_name)
            elif 'bullpup' in weapon_lower:
                categories['Bullpup'].append(weapon_name)
            elif 'sentry' in weapon_lower:
                categories['SentryGuns'].append(weapon_name)
            else:
                categories['Other'].append(weapon_name)
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        return {k: v for k, v in categories.items() if v}

    def print_analysis_report(self, analysis: Dict, vanilla_weapons: Dict, mod_weapons: Dict):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        print("\n" + "="*80)
        print("üî´ –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–ê –û–†–£–ñ–ò–Ø GTFO –ú–û–î–ê")
        print("="*80)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚îú‚îÄ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä—É–∂–∏—è –≤ –≤–∞–Ω–∏–ª–∏: {len(vanilla_weapons)}")
        print(f"‚îú‚îÄ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä—É–∂–∏—è –≤ –º–æ–¥–µ: {len(mod_weapons)}")
        print(f"‚îú‚îÄ –ò–∑–º–µ–Ω–µ–Ω–æ –æ—Ä—É–∂–∏—è: {len(analysis['changed_weapons'])}")
        print(f"‚îú‚îÄ –ù–µ –∏–∑–º–µ–Ω–µ–Ω–æ –æ—Ä—É–∂–∏—è: {len(analysis['unchanged_weapons'])}")
        print(f"‚îú‚îÄ –ù–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ: {len(analysis['new_weapons'])}")
        print(f"‚îú‚îÄ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ: {len(analysis['removed_weapons'])}")
        print(f"‚îî‚îÄ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏–º–±–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(analysis['imba_changes'])}")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ä—É–∂–∏—è
        print(f"\nüóÇÔ∏è –ö–ê–¢–ï–ì–û–†–ò–ò –û–†–£–ñ–ò–Ø:")
        categories = self.generate_weapon_categories(vanilla_weapons)
        for category, weapons in categories.items():
            print(f"‚îú‚îÄ {category}: {len(weapons)} –µ–¥–∏–Ω–∏—Ü")
        
        # –ò–º–±–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if analysis['imba_changes']:
            print(f"\n‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û –ò–ú–ë–û–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
            for change in analysis['imba_changes']:
                sign = "+" if change['change_percent'] > 0 else ""
                print(f"‚îú‚îÄ {change['weapon']}")
                print(f"‚îÇ  ‚îî‚îÄ {change['parameter']}: {change['vanilla']} ‚Üí {change['mod']} ({sign}{change['change_percent']:.1f}%)")
        else:
            print(f"\n‚úÖ –ò–ú–ë–û–í–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        print(f"\nüîß –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
        
        for weapon_name, changes in analysis['changed_weapons'].items():
            print(f"\nüî∏ {weapon_name}:")
            
            for param, change_data in changes.items():
                vanilla_val = change_data['vanilla']
                mod_val = change_data['mod']
                percent_change = change_data['change_percent']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if percent_change > 0:
                    change_type = "–£–°–ò–õ–ï–ù"
                    color = "üî•" if percent_change > 30 else "üìà"
                else:
                    change_type = "–û–°–õ–ê–ë–õ–ï–ù"
                    color = "‚ùÑÔ∏è" if percent_change < -30 else "üìâ"
                
                print(f"   {color} {param}: {vanilla_val} ‚Üí {mod_val} ({change_type} –Ω–∞ {abs(percent_change):.1f}%)")
        
        # –ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        if analysis['unchanged_weapons']:
            print(f"\nüîí –ù–ï–ò–ó–ú–ï–ù–ï–ù–ù–û–ï –û–†–£–ñ–ò–ï ({len(analysis['unchanged_weapons'])} –µ–¥–∏–Ω–∏—Ü):")
            for weapon in analysis['unchanged_weapons'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"‚îú‚îÄ {weapon}")
            if len(analysis['unchanged_weapons']) > 10:
                print(f"‚îî‚îÄ ... –∏ –µ—â–µ {len(analysis['unchanged_weapons']) - 10} –µ–¥–∏–Ω–∏—Ü")
        
        # –ù–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ
        if analysis['new_weapons']:
            print(f"\nüÜï –ù–û–í–û–ï –û–†–£–ñ–ò–ï:")
            for weapon in analysis['new_weapons']:
                print(f"‚îú‚îÄ {weapon}")
        
        # –£–¥–∞–ª–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ  
        if analysis['removed_weapons']:
            print(f"\nüóëÔ∏è –£–î–ê–õ–ï–ù–ù–û–ï –û–†–£–ñ–ò–ï:")
            for weapon in analysis['removed_weapons']:
                print(f"‚îú‚îÄ {weapon}")
        
        print(f"\n" + "="*80)
        print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        total_damage_changes = 0
        damage_weapons = 0
        
        for weapon_name, changes in analysis['changed_weapons'].items():
            if 'Damage' in changes:
                total_damage_changes += changes['Damage']['change_percent']
                damage_weapons += 1
        
        if damage_weapons > 0:
            avg_damage_change = total_damage_changes / damage_weapons
            if avg_damage_change > 10:
                print("‚îú‚îÄ üî• –ú–æ–¥ –≤ —Ü–µ–ª–æ–º –£–°–ò–õ–ò–í–ê–ï–¢ –æ—Ä—É–∂–∏–µ")
            elif avg_damage_change < -10:
                print("‚îú‚îÄ ‚ùÑÔ∏è –ú–æ–¥ –≤ —Ü–µ–ª–æ–º –û–°–õ–ê–ë–õ–Ø–ï–¢ –æ—Ä—É–∂–∏–µ")
            else:
                print("‚îú‚îÄ ‚öñÔ∏è –ú–æ–¥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ë–ê–õ–ê–ù–° –æ—Ä—É–∂–∏—è")
        
        if len(analysis['imba_changes']) > 3:
            print("‚îú‚îÄ ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏–º–±–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π!")
        elif len(analysis['imba_changes']) == 0:
            print("‚îú‚îÄ ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–≥–ª—è–¥—è—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏")
        
        changed_percentage = (len(analysis['changed_weapons']) / len(vanilla_weapons)) * 100
        print(f"‚îî‚îÄ üìä –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ {changed_percentage:.1f}% –æ—Ç –≤—Å–µ–≥–æ –æ—Ä—É–∂–∏—è")
        
        print("="*80)

    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        print("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–ª–∞–Ω—Å–∞ –æ—Ä—É–∂–∏—è GTFO –º–æ–¥–∞...")
        
        if not self.load_data():
            return False
        
        print("üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ä—É–∂–∏–∏...")
        vanilla_weapons = self.extract_weapons(self.vanilla_data)
        mod_weapons = self.extract_weapons(self.mod_data)
        
        print("‚ö° –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        analysis = self.analyze_weapon_changes(vanilla_weapons, mod_weapons)
        
        self.print_analysis_report(analysis, vanilla_weapons, mod_weapons)
        
        return True

def main():
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    vanilla_path = "/home/vlad/–î–æ–∫—É–º–µ–Ω—Ç—ã/suslow-rebalance-mod/vanilla/GameData_ArchetypeDataBlock_bin.json"
    mod_path = "/home/vlad/–î–æ–∫—É–º–µ–Ω—Ç—ã/suslow-rebalance-mod/BepInEx/plugins/suslow_rebalance_mod/GameData_ArchetypeDataBlock_bin.json"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(vanilla_path):
        print(f"‚ùå –í–∞–Ω–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {vanilla_path}")
        return
    
    if not os.path.exists(mod_path):
        print(f"‚ùå –§–∞–π–ª –º–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {mod_path}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    analyzer = WeaponBalanceAnalyzer(vanilla_path, mod_path)
    analyzer.run_analysis()

if __name__ == "__main__":
    main()